plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'maven-publish'
}

group = 'com.snippetsearcher'
version = '0.0.1-SNAPSHOT'
description = 'Snippet CRUD + validation via language-service'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testImplementation 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

}

tasks.named('test') {
	useJUnitPlatform()
}


spotless {
	java {
		target '**/*.java'
		googleJavaFormat()
		trimTrailingWhitespace()
		endWithNewline()
		indentWithSpaces(4)
	}
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacoco {
	toolVersion = '0.8.11'
}

if (!tasks.names.contains('jacocoTestReport')) {
	tasks.register('jacocoTestReport', JacocoReport) {
		dependsOn 'test'
		reports {
			xml.required.set(true)
			html.required.set(true)
		}
		executionData.from fileTree(buildDir) {
			include 'jacoco/test.exec',
					'jacoco/test*.exec',
					'outputs/unit_test_code_coverage/*/*.ec'
		}
	}
} else {
	tasks.named('jacocoTestReport', JacocoReport).configure {
		reports {
			xml.required.set(true)
			html.required.set(true)
		}
		executionData.from fileTree(buildDir) {
			include 'jacoco/test.exec',
					'jacoco/test*.exec',
					'outputs/unit_test_code_coverage/*/*.ec'
		}
	}
}

if (!tasks.names.contains('jacocoTestCoverageVerification')) {
	tasks.register('jacocoTestCoverageVerification', JacocoCoverageVerification) {
		dependsOn 'test'
		violationRules {
			rule {
				limit {
					minimum = 0.00
				}
			}
		}
		executionData.from fileTree(buildDir) {
			include 'jacoco/test.exec',
					'jacoco/test*.exec',
					'outputs/unit_test_code_coverage/*/*.ec'
		}
	}
} else {
	tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification).configure {
		violationRules {
			rule {
				limit {
					minimum = 0.00
				}
			}
		}
		executionData.from fileTree(buildDir) {
			include 'jacoco/test.exec',
					'jacoco/test*.exec',
					'outputs/unit_test_code_coverage/*/*.ec'
		}
	}
}


tasks.named('check') {
	dependsOn 'spotlessCheck', 'jacocoTestReport', 'jacocoTestCoverageVerification'
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			name = 'GitHubPackages'
			url = uri('https://maven.pkg.github.com/Ingenieria-de-Sistemas-123/PrintScript')
			credentials {
				username = System.getenv('GITHUB_ACTOR') ?: ''
				password = System.getenv('GITHUB_TOKEN') ?: ''
			}
		}
	}
}

